# Copyright (c) Files Community
# Licensed under the MIT License.

# Abstract:
#  Minimal build for local use

name: Files Minimal Build (Stable)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]
    env:
      SOLUTION_NAME:              'Files.slnx'
      CONFIGURATION:              '${{ matrix.configuration }}'
      PLATFORM:                   '${{ matrix.platform }}'
      APPX_BUNDLE_PLATFORMS:      'x64'
      WORKING_DIR:                '${{ github.workspace }}'
      ARTIFACTS_STAGING_DIR:      '${{ github.workspace }}\artifacts'
      APPX_PACKAGE_DIR:           '${{ github.workspace }}\artifacts\AppxPackages'
      PACKAGE_PROJECT_PATH:       'src\Files.App (Package)\Files.Package.wapproj'
      LAUNCHER_PROJECT_PATH:      'src\Files.App.Launcher\Files.App.Launcher.vcxproj'

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Use Windows SDK Preview
      shell: cmd
      run: |
        for /f %%a in ('dir /b /a:d %localappdata%\Microsoft\VisualStudio\17*') do echo UsePreviews=True>%localappdata%\Microsoft\VisualStudio\%%a\sdk.txt

    - name: Restore Files
      shell: pwsh
      run: |
        msbuild $env:SOLUTION_NAME `
          -t:Restore `
          -p:Platform=$env:PLATFORM `
          -p:Configuration=$env:CONFIGURATION `
          -p:PublishReadyToRun=true `
          -v:quiet

    - name: Restore NuGet Packages for Launcher Project
      shell: pwsh
      run: |
        nuget restore "$env:LAUNCHER_PROJECT_PATH" `
          -SolutionDirectory "$env:WORKING_DIR"

    - name: Build launcher project
      shell: pwsh
      run: |
        msbuild "$env:LAUNCHER_PROJECT_PATH" `
          -t:Build `
          -p:Platform=$env:PLATFORM `
          -p:Configuration=$env:CONFIGURATION

    - name: Build & package Files (Minimal)
      shell: pwsh
      run: |
        msbuild "$env:PACKAGE_PROJECT_PATH" `
          -t:Build `
          -p:Platform=$env:PLATFORM `
          -p:Configuration=$env:CONFIGURATION `
          -p:AppxBundlePlatforms=$env:APPX_BUNDLE_PLATFORMS `
          -p:AppxPackageDir="$env:APPX_PACKAGE_DIR" `
          -p:AppxBundle=Never `
          -p:GenerateAppInstallerFile=false `
          -p:UapAppxPackageBuildMode=Store `
          -v:minimal

    - name: Remove empty files
      shell: pwsh
      run: |
        if (Test-Path $env:ARTIFACTS_STAGING_DIR) {
          Get-ChildItem $env:ARTIFACTS_STAGING_DIR -Recurse | Where-Object { $_.Length -eq 0 } | Remove-Item -Force
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 'Files-Appx-Package'
        path: ${{ env.ARTIFACTS_STAGING_DIR }}
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: success() && startsWith(github.ref, 'refs/tags/v')
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          ${{ env.APPX_PACKAGE_DIR }}/*.appx
          ${{ env.APPX_PACKAGE_DIR }}/*.msix
